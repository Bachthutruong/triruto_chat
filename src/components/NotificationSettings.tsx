'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Bell, BellOff, Volume2, VolumeX } from 'lucide-react';
import { useNotificationSettings } from '@/hooks/use-notification';
import { notificationService } from '@/lib/services/notification.service';

export function NotificationSettings() {
  const { settings, updateSettings } = useNotificationSettings();
  const [permission, setPermission] = useState<NotificationPermission>('default');
  const [isSupported, setIsSupported] = useState(false);
  const [isTestingNotification, setIsTestingNotification] = useState(false);

  useEffect(() => {
    setIsSupported(notificationService.isNotificationSupported());
    setPermission(notificationService.getPermissionStatus());
  }, []);

  const handleRequestPermission = async () => {
    const newPermission = await notificationService.requestPermission();
    setPermission(newPermission);
  };

  const handleTestNotification = async () => {
    if (permission !== 'granted') {
      await handleRequestPermission();
      return;
    }

    setIsTestingNotification(true);
    try {
      await notificationService.showNotification({
        type: 'new_message',
        title: 'üîî Th√¥ng b√°o th·ª≠ nghi·ªám',
        body: 'H·ªá th·ªëng th√¥ng b√°o ƒëang ho·∫°t ƒë·ªông t·ªët!',
        requireInteraction: false,
      });
    } catch (error) {
      console.error('Error showing test notification:', error);
    } finally {
      setTimeout(() => setIsTestingNotification(false), 1000);
    }
  };

  const getPermissionStatus = () => {
    switch (permission) {
      case 'granted':
        return { color: 'text-green-600', text: 'ƒê√£ cho ph√©p', icon: Bell };
      case 'denied':
        return { color: 'text-red-600', text: 'ƒê√£ t·ª´ ch·ªëi', icon: BellOff };
      default:
        return { color: 'text-yellow-600', text: 'Ch∆∞a quy·∫øt ƒë·ªãnh', icon: Volume2 };
    }
  };

  if (!isSupported) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <VolumeX className="h-5 w-5" />
            Th√¥ng b√°o Web
          </CardTitle>
          <CardDescription>
            Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ th√¥ng b√°o web
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Alert>
            <AlertDescription>
              Vui l√≤ng s·ª≠ d·ª•ng tr√¨nh duy·ªát hi·ªán ƒë·∫°i nh∆∞ Chrome, Firefox, ho·∫∑c Safari ƒë·ªÉ nh·∫≠n th√¥ng b√°o.
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    );
  }

  const statusInfo = getPermissionStatus();
  const StatusIcon = statusInfo.icon;

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <StatusIcon className="h-5 w-5" />
          C√†i ƒë·∫∑t th√¥ng b√°o Web
        </CardTitle>
        <CardDescription>
          Qu·∫£n l√Ω th√¥ng b√°o cho kh√°ch m·ªõi, tin nh·∫Øn m·ªõi v√† ph·∫£n h·ªìi chat
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Permission Status */}
        <div className="flex items-center justify-between p-4 border rounded-lg">
          <div>
            <div className="font-medium">Tr·∫°ng th√°i quy·ªÅn th√¥ng b√°o</div>
            <div className={`text-sm ${statusInfo.color}`}>
              {statusInfo.text}
            </div>
          </div>
          {permission !== 'granted' && (
            <Button onClick={handleRequestPermission} variant="outline">
              Cho ph√©p th√¥ng b√°o
            </Button>
          )}
          {permission === 'granted' && (
            <Button 
              onClick={handleTestNotification} 
              variant="outline"
              disabled={isTestingNotification}
            >
              {isTestingNotification ? 'ƒêang g·ª≠i...' : 'Th·ª≠ nghi·ªám'}
            </Button>
          )}
        </div>

        {permission === 'denied' && (
          <Alert>
            <AlertDescription>
              B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn th√¥ng b√°o. ƒê·ªÉ b·∫≠t l·∫°i, vui l√≤ng:
              <ol className="list-decimal list-inside mt-2 space-y-1">
                <li>Nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng kh√≥a/th√¥ng tin b√™n tr√°i thanh ƒë·ªãa ch·ªâ</li>
                <li>Ch·ªçn "Cho ph√©p" cho m·ª•c Th√¥ng b√°o</li>
                <li>T·∫£i l·∫°i trang</li>
              </ol>
            </AlertDescription>
          </Alert>
        )}

        {/* Notification Type Settings */}
        <div className="space-y-4">
          <h4 className="font-medium">Lo·∫°i th√¥ng b√°o</h4>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="new-customer" className="text-base">
                  Kh√°ch h√†ng m·ªõi
                </Label>
                <div className="text-sm text-muted-foreground">
                  Th√¥ng b√°o khi c√≥ kh√°ch h√†ng m·ªõi li√™n h·ªá l·∫ßn ƒë·∫ßu
                </div>
              </div>
              <Switch
                id="new-customer"
                checked={settings.newCustomer}
                onCheckedChange={(checked) => updateSettings({ newCustomer: checked })}
                disabled={permission !== 'granted'}
              />
            </div>

            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="new-message" className="text-base">
                  Tin nh·∫Øn m·ªõi
                </Label>
                <div className="text-sm text-muted-foreground">
                  Th√¥ng b√°o khi kh√°ch h√†ng g·ª≠i tin nh·∫Øn m·ªõi
                </div>
              </div>
              <Switch
                id="new-message"
                checked={settings.newMessage}
                onCheckedChange={(checked) => updateSettings({ newMessage: checked })}
                disabled={permission !== 'granted'}
              />
            </div>

            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="chat-reply" className="text-base">
                  Ph·∫£n h·ªìi chat
                </Label>
                <div className="text-sm text-muted-foreground">
                  Th√¥ng b√°o khi nh√¢n vi√™n ph·∫£n h·ªìi kh√°ch h√†ng
                </div>
              </div>
              <Switch
                id="chat-reply"
                checked={settings.chatReply}
                onCheckedChange={(checked) => updateSettings({ chatReply: checked })}
                disabled={permission !== 'granted'}
              />
            </div>
          </div>
        </div>

        {permission === 'granted' && (
          <Alert>
            <Bell className="h-4 w-4" />
            <AlertDescription>
              Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t! B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o ngay c·∫£ khi kh√¥ng m·ªü trang web.
            </AlertDescription>
          </Alert>
        )}
      </CardContent>
    </Card>
  );
} 